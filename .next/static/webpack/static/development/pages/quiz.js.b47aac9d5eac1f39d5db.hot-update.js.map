{"version":3,"file":"static/webpack/static/development/pages/quiz.js.b47aac9d5eac1f39d5db.hot-update.js","sources":["webpack:///./pages/quiz/index.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  // Card,\n  CardContent,\n  Typography,\n  Box,\n  FormControl,\n  FormLabel,\n  FormControlLabel,\n  RadioGroup,\n  Radio,\n} from '@material-ui/core';\nimport { withTheme } from '@material-ui/core/styles';\nimport { blue } from '@material-ui/core/colors';\nimport Head from 'next/head';\nimport { Pagination } from '@material-ui/lab';\nimport {\n  Button,\n  Background,\n  Card,\n  CardTitle,\n  CardFooter,\n  CardActions,\n  QuestionTitle,\n} from './styles';\nimport dataJSON from '../../data.json';\nimport results from '../../results.json';\n\nArray.prototype.shuffle = function () {\n  var i = this.length,\n    j,\n    temp;\n  if (i == 0) return this;\n  while (--i) {\n    j = Math.floor(Math.random() * (i + 1));\n    temp = this[i];\n    this[i] = this[j];\n    this[j] = temp;\n  }\n  return this;\n};\n\nconst Quiz = (props) => {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [value, setValue] = useState(-1);\n  const [answers, setAnswers] = useState([]);\n  const [result, setResult] = useState(false);\n  const [data, setData] = useState(false);\n\n  useEffect(() => {\n    alert(props.id);\n    let shuffledData = [...dataJSON];\n    shuffledData.map((question) => {\n      let shuffledQuestion = { ...question };\n      shuffledQuestion.answers = shuffledQuestion.answers.shuffle();\n      return shuffledQuestion;\n    });\n    setData(shuffledData);\n  }, []);\n\n  useEffect(() => {\n    setValue(answers[currentQuestion] || -1);\n  }, [currentQuestion]);\n\n  const setCurrentAnswer = () => {\n    let newAnswers = [...answers];\n    newAnswers[currentQuestion] = value;\n    setAnswers(newAnswers);\n  };\n\n  const getFinalValue = () => {\n    let sum = 0;\n    data.forEach((question, index) => {\n      if (answers[index] && answers[index] >= 0)\n        sum += question.answers[answers[index]].value;\n    });\n    return sum;\n  };\n\n  const handleChange = (value) => {\n    setCurrentAnswer();\n    if (value >= data.length) {\n      console.log(answers);\n      const media = getFinalValue() / data.length;\n      if (media < 36) setResult(results[0]);\n      else if (media < 71) setResult(results[1]);\n      else setResult(results[2]);\n      return;\n    }\n    setCurrentQuestion(value);\n  };\n\n  return (\n    <>\n      <Head>\n        <link rel=\"stylesheet\" href=\"/pages/quiz/styles.css\" />\n      </Head>\n      <Background>\n        <Card className=\"card\">\n          <CardContent>\n            <CardTitle gutterBottom>\n              Que tipo de empreendedor é você durante a crise?\n            </CardTitle>\n            <hr />\n            <p id=\"question\"></p>\n            <form id=\"answers\" action=\"#\"></form>\n          </CardContent>\n          <CardActions>\n            {result && <div dangerouslySetInnerHTML={{ __html: result }}></div>}\n            {!result && data && (\n              <form action=\"#\">\n                <QuestionTitle>{data[currentQuestion].question}</QuestionTitle>\n                <FormControl component=\"fieldset\">\n                  <RadioGroup\n                    aria-label=\"answer\"\n                    name=\"answer\"\n                    onChange={(event) => {\n                      setValue(event.target.value);\n                    }}\n                    value={value}\n                  >\n                    {data[currentQuestion].answers.map((answer, index) => (\n                      <FormControlLabel\n                        key={index}\n                        value={`${index}`}\n                        control={<Radio color=\"primary\" />}\n                        label={answer.text}\n                      />\n                    ))}\n                  </RadioGroup>\n                </FormControl>\n              </form>\n            )}\n          </CardActions>\n          {!result && (\n            <CardFooter>\n              <hr />\n              <Button\n                onClick={() => {\n                  handleChange(currentQuestion + 1);\n                }}\n                variant=\"contained\"\n                color=\"primary\"\n                className={'button'}\n              >\n                {currentQuestion === data.length - 1\n                  ? 'Finalizar e Visualizar Resultado'\n                  : 'Próxima Pergunta'}\n              </Button>\n              <Pagination\n                page={currentQuestion + 1}\n                color=\"primary\"\n                style={{ marginTop: 40 }}\n                count={data.length}\n                onChange={(event, value) => {\n                  handleChange(value - 1);\n                }}\n              />\n            </CardFooter>\n          )}\n        </Card>\n      </Background>\n    </>\n  );\n};\n\nexport async function getServerSideProps(context) {\n  return {\n    props: { id: 1 },\n  };\n}\n\nexport default withTheme(Quiz);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAGA;AASA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AADA;AAiBA;AACA;AACA;AACA;AACA;AACA;AANA;AAaA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAPA;AAeA;AACA;;AAOA;;;;A","sourceRoot":""}