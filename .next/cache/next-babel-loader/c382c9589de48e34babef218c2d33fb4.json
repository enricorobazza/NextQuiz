{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { // Card,\nCardContent, Typography, Box, FormControl, FormLabel, FormControlLabel, RadioGroup, Radio } from '@material-ui/core';\nimport { withTheme } from '@material-ui/core/styles';\nimport { blue } from '@material-ui/core/colors';\nimport Head from 'next/head';\nimport { Pagination } from '@material-ui/lab';\nimport { Button, Background, Card, CardTitle, CardFooter, CardActions, QuestionTitle } from './styles';\nimport dataJSON from '../../data.json';\nimport results from '../../results.json';\n\nArray.prototype.shuffle = function () {\n  var i = this.length,\n      j,\n      temp;\n  if (i == 0) return this;\n\n  while (--i) {\n    j = Math.floor(Math.random() * (i + 1));\n    temp = this[i];\n    this[i] = this[j];\n    this[j] = temp;\n  }\n\n  return this;\n};\n\nconst Quiz = () => {\n  const {\n    0: currentQuestion,\n    1: setCurrentQuestion\n  } = useState(0);\n  const {\n    0: value,\n    1: setValue\n  } = useState(-1);\n  const {\n    0: answers,\n    1: setAnswers\n  } = useState([]);\n  const {\n    0: result,\n    1: setResult\n  } = useState(false);\n  const {\n    0: data,\n    1: setData\n  } = useState([]);\n  useEffect(() => {\n    let shuffledData = [...dataJSON];\n    shuffledData.map(question => {\n      let shuffledQuestion = _objectSpread({}, question);\n\n      shuffledQuestion.answers = shuffledQuestion.answers.shuffle();\n      return shuffledQuestion;\n    });\n    setData(shuffledData);\n  }, []);\n  useEffect(() => {\n    setValue(answers[currentQuestion] || -1);\n  }, [currentQuestion]);\n\n  const setCurrentAnswer = () => {\n    let newAnswers = [...answers];\n    newAnswers[currentQuestion] = value;\n    setAnswers(newAnswers);\n  };\n\n  const getFinalValue = () => {\n    let sum = 0;\n    data.forEach((question, index) => {\n      if (answers[index] && answers[index] >= 0) sum += question.answers[answers[index]].value;\n    });\n    return sum;\n  };\n\n  const handleChange = value => {\n    setCurrentAnswer();\n\n    if (value >= data.length) {\n      console.log(answers);\n      const media = getFinalValue() / data.length;\n      if (media < 36) setResult(results[0]);else if (media < 71) setResult(results[1]);else setResult(results[2]);\n      return;\n    }\n\n    setCurrentQuestion(value);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"/pages/quiz/styles.css\"\n  })), __jsx(Background, null, __jsx(Card, {\n    className: \"card\"\n  }, __jsx(CardContent, null, __jsx(CardTitle, {\n    gutterBottom: true\n  }, \"Que tipo de empreendedor \\xE9 voc\\xEA durante a crise?\"), __jsx(\"hr\", null), __jsx(\"p\", {\n    id: \"question\"\n  }), __jsx(\"form\", {\n    id: \"answers\",\n    action: \"#\"\n  })), __jsx(CardActions, null, result && __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: result\n    }\n  }), !result && __jsx(\"form\", {\n    action: \"#\"\n  }, __jsx(QuestionTitle, null, data[currentQuestion].question), __jsx(FormControl, {\n    component: \"fieldset\"\n  }, __jsx(RadioGroup, {\n    \"aria-label\": \"gender\",\n    name: \"gender1\",\n    onChange: event => {\n      setValue(event.target.value);\n    },\n    value: value\n  }, data[currentQuestion].answers.map((answer, index) => __jsx(FormControlLabel, {\n    key: index,\n    value: `${index}`,\n    control: __jsx(Radio, {\n      color: \"primary\"\n    }),\n    label: answer.text\n  })))))), !result && __jsx(CardFooter, null, __jsx(\"hr\", null), __jsx(Button, {\n    onClick: () => {\n      handleChange(currentQuestion + 1);\n    },\n    variant: \"contained\",\n    color: \"blue\",\n    className: ['button']\n  }, currentQuestion === data.length - 1 ? 'Finalizar e Visualizar Resultado' : 'PrÃ³xima Pergunta'), __jsx(Pagination, {\n    page: currentQuestion + 1,\n    color: \"primary\",\n    style: {\n      marginTop: 40\n    },\n    count: data.length,\n    onChange: (event, value) => {\n      handleChange(value - 1);\n    }\n  })))));\n};\n\nexport default withTheme(Quiz);","map":{"version":3,"sources":["/Users/enricorobazza/Documents/Trabalho/Quiz/pages/quiz/index.js"],"names":["React","useState","useEffect","CardContent","Typography","Box","FormControl","FormLabel","FormControlLabel","RadioGroup","Radio","withTheme","blue","Head","Pagination","Button","Background","Card","CardTitle","CardFooter","CardActions","QuestionTitle","dataJSON","results","Array","prototype","shuffle","i","length","j","temp","Math","floor","random","Quiz","currentQuestion","setCurrentQuestion","value","setValue","answers","setAnswers","result","setResult","data","setData","shuffledData","map","question","shuffledQuestion","setCurrentAnswer","newAnswers","getFinalValue","sum","forEach","index","handleChange","console","log","media","__html","event","target","answer","text","marginTop"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  // Card,\n  CardContent,\n  Typography,\n  Box,\n  FormControl,\n  FormLabel,\n  FormControlLabel,\n  RadioGroup,\n  Radio,\n} from '@material-ui/core';\nimport { withTheme } from '@material-ui/core/styles';\nimport { blue } from '@material-ui/core/colors';\nimport Head from 'next/head';\nimport { Pagination } from '@material-ui/lab';\nimport {\n  Button,\n  Background,\n  Card,\n  CardTitle,\n  CardFooter,\n  CardActions,\n  QuestionTitle,\n} from './styles';\nimport dataJSON from '../../data.json';\nimport results from '../../results.json';\n\nArray.prototype.shuffle = function () {\n  var i = this.length,\n    j,\n    temp;\n  if (i == 0) return this;\n  while (--i) {\n    j = Math.floor(Math.random() * (i + 1));\n    temp = this[i];\n    this[i] = this[j];\n    this[j] = temp;\n  }\n  return this;\n};\n\nconst Quiz = () => {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [value, setValue] = useState(-1);\n  const [answers, setAnswers] = useState([]);\n  const [result, setResult] = useState(false);\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    let shuffledData = [...dataJSON];\n    shuffledData.map((question) => {\n      let shuffledQuestion = { ...question };\n      shuffledQuestion.answers = shuffledQuestion.answers.shuffle();\n      return shuffledQuestion;\n    });\n    setData(shuffledData);\n  }, []);\n\n  useEffect(() => {\n    setValue(answers[currentQuestion] || -1);\n  }, [currentQuestion]);\n\n  const setCurrentAnswer = () => {\n    let newAnswers = [...answers];\n    newAnswers[currentQuestion] = value;\n    setAnswers(newAnswers);\n  };\n\n  const getFinalValue = () => {\n    let sum = 0;\n    data.forEach((question, index) => {\n      if (answers[index] && answers[index] >= 0)\n        sum += question.answers[answers[index]].value;\n    });\n    return sum;\n  };\n\n  const handleChange = (value) => {\n    setCurrentAnswer();\n    if (value >= data.length) {\n      console.log(answers);\n      const media = getFinalValue() / data.length;\n      if (media < 36) setResult(results[0]);\n      else if (media < 71) setResult(results[1]);\n      else setResult(results[2]);\n      return;\n    }\n    setCurrentQuestion(value);\n  };\n\n  return (\n    <>\n      <Head>\n        <link rel=\"stylesheet\" href=\"/pages/quiz/styles.css\" />\n      </Head>\n      <Background>\n        <Card className=\"card\">\n          <CardContent>\n            <CardTitle gutterBottom>\n              Que tipo de empreendedor Ã© vocÃª durante a crise?\n            </CardTitle>\n            <hr />\n            <p id=\"question\"></p>\n            <form id=\"answers\" action=\"#\"></form>\n          </CardContent>\n          <CardActions>\n            {result && <div dangerouslySetInnerHTML={{ __html: result }}></div>}\n            {!result && (\n              <form action=\"#\">\n                <QuestionTitle>{data[currentQuestion].question}</QuestionTitle>\n                <FormControl component=\"fieldset\">\n                  <RadioGroup\n                    aria-label=\"gender\"\n                    name=\"gender1\"\n                    onChange={(event) => {\n                      setValue(event.target.value);\n                    }}\n                    value={value}\n                  >\n                    {data[currentQuestion].answers.map((answer, index) => (\n                      <FormControlLabel\n                        key={index}\n                        value={`${index}`}\n                        control={<Radio color=\"primary\" />}\n                        label={answer.text}\n                      />\n                    ))}\n                  </RadioGroup>\n                </FormControl>\n              </form>\n            )}\n          </CardActions>\n          {!result && (\n            <CardFooter>\n              <hr />\n              <Button\n                onClick={() => {\n                  handleChange(currentQuestion + 1);\n                }}\n                variant=\"contained\"\n                color=\"blue\"\n                className={['button']}\n              >\n                {currentQuestion === data.length - 1\n                  ? 'Finalizar e Visualizar Resultado'\n                  : 'PrÃ³xima Pergunta'}\n              </Button>\n              <Pagination\n                page={currentQuestion + 1}\n                color=\"primary\"\n                style={{ marginTop: 40 }}\n                count={data.length}\n                onChange={(event, value) => {\n                  handleChange(value - 1);\n                }}\n              />\n            </CardFooter>\n          )}\n        </Card>\n      </Background>\n    </>\n  );\n};\n\nexport default withTheme(Quiz);\n"]},"metadata":{},"sourceType":"module"}