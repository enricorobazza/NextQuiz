{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport db from '../../repository';\nconst ref = db().collection('quiz');\n\nconst getQuiz = async id => {\n  const quiz = await ref.doc(id).get();\n\n  if (quiz.exists) {\n    const questions = await ref.doc(id).collection('questions').get();\n    console.log(questions);\n    const quizData = quiz.data();\n    return _objectSpread({}, quizData, {\n      questions\n    });\n  }\n\n  return undefined;\n};\n\nexport default {\n  getQuiz\n};","map":{"version":3,"sources":["/Users/enricorobazza/Documents/Trabalho/Quiz/repository/quiz/quizRepository.js"],"names":["db","ref","collection","getQuiz","id","quiz","doc","get","exists","questions","console","log","quizData","data","undefined"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,kBAAf;AAEA,MAAMC,GAAG,GAAGD,EAAE,GAAGE,UAAL,CAAgB,MAAhB,CAAZ;;AAEA,MAAMC,OAAO,GAAG,MAAOC,EAAP,IAAc;AAC5B,QAAMC,IAAI,GAAG,MAAMJ,GAAG,CAACK,GAAJ,CAAQF,EAAR,EAAYG,GAAZ,EAAnB;;AACA,MAAIF,IAAI,CAACG,MAAT,EAAiB;AACf,UAAMC,SAAS,GAAG,MAAMR,GAAG,CAACK,GAAJ,CAAQF,EAAR,EAAYF,UAAZ,CAAuB,WAAvB,EAAoCK,GAApC,EAAxB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACA,UAAMG,QAAQ,GAAGP,IAAI,CAACQ,IAAL,EAAjB;AAEA,6BAAYD,QAAZ;AAAsBH,MAAAA;AAAtB;AACD;;AACD,SAAOK,SAAP;AACD,CAVD;;AAYA,eAAe;AAAEX,EAAAA;AAAF,CAAf","sourcesContent":["import db from '../../repository';\n\nconst ref = db().collection('quiz');\n\nconst getQuiz = async (id) => {\n  const quiz = await ref.doc(id).get();\n  if (quiz.exists) {\n    const questions = await ref.doc(id).collection('questions').get();\n    console.log(questions);\n    const quizData = quiz.data();\n\n    return { ...quizData, questions };\n  }\n  return undefined;\n};\n\nexport default { getQuiz };\n"]},"metadata":{},"sourceType":"module"}