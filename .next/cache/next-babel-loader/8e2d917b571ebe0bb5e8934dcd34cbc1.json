{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport db from '../../repository';\nconst ref = db().collection('quiz');\n\nconst getQuiz = async id => {\n  const quiz = await ref.doc(id).get();\n  let retQuiz;\n\n  if (quiz.exists) {\n    retQuiz = _objectSpread({}, quiz.data(), {\n      questions: []\n    });\n    const questions = await ref.doc(id).collection('questions').get();\n    const answersPromises = [];\n    questions.forEach(doc => {\n      answersPromises.push(doc.ref.collection('answers').get());\n      retQuiz.questions.push(doc.data());\n    });\n    const answersResp = await Promise.all(answersPromises);\n    answersResp.forEach(answers => {\n      answers.forEach(answer => {\n        console.log(answer.data());\n      });\n    });\n  }\n\n  return retQuiz;\n};\n\nexport default {\n  getQuiz\n};","map":{"version":3,"sources":["/Users/enricorobazza/Documents/Trabalho/Quiz/repository/quiz/quizRepository.js"],"names":["db","ref","collection","getQuiz","id","quiz","doc","get","retQuiz","exists","data","questions","answersPromises","forEach","push","answersResp","Promise","all","answers","answer","console","log"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,kBAAf;AAEA,MAAMC,GAAG,GAAGD,EAAE,GAAGE,UAAL,CAAgB,MAAhB,CAAZ;;AAEA,MAAMC,OAAO,GAAG,MAAOC,EAAP,IAAc;AAC5B,QAAMC,IAAI,GAAG,MAAMJ,GAAG,CAACK,GAAJ,CAAQF,EAAR,EAAYG,GAAZ,EAAnB;AACA,MAAIC,OAAJ;;AACA,MAAIH,IAAI,CAACI,MAAT,EAAiB;AACfD,IAAAA,OAAO,qBAAQH,IAAI,CAACK,IAAL,EAAR;AAAqBC,MAAAA,SAAS,EAAE;AAAhC,MAAP;AACA,UAAMA,SAAS,GAAG,MAAMV,GAAG,CAACK,GAAJ,CAAQF,EAAR,EAAYF,UAAZ,CAAuB,WAAvB,EAAoCK,GAApC,EAAxB;AACA,UAAMK,eAAe,GAAG,EAAxB;AACAD,IAAAA,SAAS,CAACE,OAAV,CAAmBP,GAAD,IAAS;AACzBM,MAAAA,eAAe,CAACE,IAAhB,CAAqBR,GAAG,CAACL,GAAJ,CAAQC,UAAR,CAAmB,SAAnB,EAA8BK,GAA9B,EAArB;AACAC,MAAAA,OAAO,CAACG,SAAR,CAAkBG,IAAlB,CAAuBR,GAAG,CAACI,IAAJ,EAAvB;AACD,KAHD;AAKA,UAAMK,WAAW,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYL,eAAZ,CAA1B;AACAG,IAAAA,WAAW,CAACF,OAAZ,CAAqBK,OAAD,IAAa;AAC/BA,MAAAA,OAAO,CAACL,OAAR,CAAiBM,MAAD,IAAY;AAC1BC,QAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACT,IAAP,EAAZ;AACD,OAFD;AAGD,KAJD;AAKD;;AACD,SAAOF,OAAP;AACD,CApBD;;AAsBA,eAAe;AAAEL,EAAAA;AAAF,CAAf","sourcesContent":["import db from '../../repository';\n\nconst ref = db().collection('quiz');\n\nconst getQuiz = async (id) => {\n  const quiz = await ref.doc(id).get();\n  let retQuiz;\n  if (quiz.exists) {\n    retQuiz = { ...quiz.data(), questions: [] };\n    const questions = await ref.doc(id).collection('questions').get();\n    const answersPromises = [];\n    questions.forEach((doc) => {\n      answersPromises.push(doc.ref.collection('answers').get());\n      retQuiz.questions.push(doc.data());\n    });\n\n    const answersResp = await Promise.all(answersPromises);\n    answersResp.forEach((answers) => {\n      answers.forEach((answer) => {\n        console.log(answer.data());\n      });\n    });\n  }\n  return retQuiz;\n};\n\nexport default { getQuiz };\n"]},"metadata":{},"sourceType":"module"}